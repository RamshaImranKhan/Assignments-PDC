{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPVzc/U8wxlGpezXHaHQBfF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eSLVotOuWhnD","executionInfo":{"status":"ok","timestamp":1760623854215,"user_tz":-300,"elapsed":106825,"user":{"displayName":"RAMSHA KHAN","userId":"10959223629031507632"}},"outputId":"83d5f966-b326-4bba-8466-220fd21786de"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 9.91M/9.91M [00:02<00:00, 4.76MB/s]\n","100%|██████████| 28.9k/28.9k [00:00<00:00, 125kB/s]\n","100%|██████████| 1.65M/1.65M [00:01<00:00, 1.19MB/s]\n","100%|██████████| 4.54k/4.54k [00:00<00:00, 5.40MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["CPU Time: 46.15s\n","GPU Time: 37.61s\n","Speedup = 1.23x\n"]}],"source":["import time\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torchvision import datasets, transforms\n","from torch.utils.data import DataLoader\n","\n","transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])\n","trainset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)\n","trainloader = DataLoader(trainset, batch_size=64, shuffle=True)\n","\n","class SimpleNN(nn.Module):\n","    def __init__(self):\n","        super(SimpleNN, self).__init__()\n","        self.fc1 = nn.Linear(28*28, 128)\n","        self.fc2 = nn.Linear(128, 10)\n","    def forward(self, x):\n","        x = x.view(-1, 28*28)\n","        x = torch.relu(self.fc1(x))\n","        return self.fc2(x)\n","\n","def train(model, device, epochs=3):\n","    model.to(device)\n","    optimizer = optim.Adam(model.parameters(), lr=0.001)\n","    criterion = nn.CrossEntropyLoss()\n","    start_time = time.time()\n","    for epoch in range(epochs):\n","        for images, labels in trainloader:\n","            images, labels = images.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(images)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","    total_time = time.time() - start_time\n","    return total_time\n","cpu_device = torch.device(\"cpu\")\n","cpu_time = train(SimpleNN(), cpu_device)\n","\n","gpu_device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","gpu_time = train(SimpleNN(), gpu_device)\n","\n","print(f\"CPU Time: {cpu_time:.2f}s\")\n","print(f\"GPU Time: {gpu_time:.2f}s\")\n","print(f\"Speedup = {cpu_time / gpu_time:.2f}x\")\n","\n"]},{"cell_type":"code","source":["batch_sizes = [16, 64, 256, 1024]\n","results = []\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","for batch in batch_sizes:\n","    trainloader = DataLoader(trainset, batch_size=batch, shuffle=True)\n","    model = SimpleNN().to(device)\n","    optimizer = optim.Adam(model.parameters(), lr=0.001)\n","    criterion = nn.CrossEntropyLoss()\n","\n","    start = time.time()\n","    for epoch in range(2):\n","        for images, labels in trainloader:\n","            images, labels = images.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(images)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","    epoch_time = time.time() - start\n","    mem = torch.cuda.memory_allocated(device) / (1024 ** 2)\n","    results.append((batch, epoch_time, mem))\n","    print(f\"Batch {batch}: Time {epoch_time:.2f}s, GPU Memory {mem:.1f}MB\")\n","\n","import matplotlib.pyplot as plt\n","batches, times, mems = zip(*results)\n","plt.figure(figsize=(10,4))\n","plt.subplot(1,2,1)\n","plt.plot(batches, times, marker='o')\n","plt.title('Batch Size vs Training Time')\n","plt.xlabel('Batch Size'); plt.ylabel('Time (s)')\n","plt.subplot(1,2,2)\n","plt.plot(batches, mems, marker='o', color='orange')\n","plt.title('Batch Size vs GPU Memory Usage')\n","plt.xlabel('Batch Size'); plt.ylabel('Memory (MB)')\n","plt.tight_layout(); plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":476},"id":"XFx29DiaWkRG","executionInfo":{"status":"ok","timestamp":1760623957490,"user_tz":-300,"elapsed":103305,"user":{"displayName":"RAMSHA KHAN","userId":"10959223629031507632"}},"outputId":"08575fdf-6e0a-4461-9109-5be5114f8909"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Batch 16: Time 33.92s, GPU Memory 17.9MB\n","Batch 64: Time 24.74s, GPU Memory 17.9MB\n","Batch 256: Time 22.40s, GPU Memory 18.1MB\n","Batch 1024: Time 21.36s, GPU Memory 19.7MB\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["!pip install torch torchvision matplotlib --quiet\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torchvision import datasets, transforms\n","from torch.utils.data import DataLoader\n","import time, pandas as pd, matplotlib.pyplot as plt\n","\n","print(\"CUDA available:\", torch.cuda.is_available())\n","if torch.cuda.is_available():\n","    print(\"GPU:\", torch.cuda.get_device_name(0))\n","else:\n","    print(\"⚠️ Please enable GPU in Runtime settings.\")\n","transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.1307,), (0.3081,))\n","])\n","\n","train_ds = datasets.MNIST('./data', train=True, download=True, transform=transform)\n","train_loader = DataLoader(train_ds, batch_size=128, shuffle=True, num_workers=2, pin_memory=True)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gx4LPu0pWnhm","executionInfo":{"status":"ok","timestamp":1760623971634,"user_tz":-300,"elapsed":6961,"user":{"displayName":"RAMSHA KHAN","userId":"10959223629031507632"}},"outputId":"ef83e33b-bd2e-408f-f63d-80826150e676"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["CUDA available: True\n","GPU: Tesla T4\n"]}]},{"cell_type":"code","source":["class SmallModel(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.fc1 = nn.Linear(28*28, 128)\n","        self.fc2 = nn.Linear(128, 10)\n","    def forward(self, x):\n","        x = x.view(x.size(0), -1)\n","        x = F.relu(self.fc1(x))\n","        x = self.fc2(x)\n","        return x\n","\n","\n","class MediumModel(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.fc1 = nn.Linear(28*28, 512)\n","        self.fc2 = nn.Linear(512, 256)\n","        self.fc3 = nn.Linear(256, 128)\n","        self.fc4 = nn.Linear(128, 10)\n","    def forward(self, x):\n","        x = x.view(x.size(0), -1)\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = self.fc4(x)\n","        return x\n","\n","class LargeCNN(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        self.conv1 = nn.Conv2d(1, 32, 3, padding=1)\n","        self.conv2 = nn.Conv2d(32, 64, 3, padding=1)\n","        self.conv3 = nn.Conv2d(64, 128, 3, padding=1)\n","        self.conv4 = nn.Conv2d(128, 256, 3, padding=1)\n","        self.pool = nn.MaxPool2d(2, 2)\n","\n","        with torch.no_grad():\n","            x = torch.zeros(1, 1, 28, 28)\n","            x = F.relu(self.conv1(x))\n","            x = self.pool(F.relu(self.conv2(x)))\n","            x = self.pool(F.relu(self.conv3(x)))\n","            x = F.relu(self.conv4(x))\n","            flat_size = x.view(1, -1).size(1)\n","\n","        self.fc1 = nn.Linear(flat_size, 128)\n","        self.fc2 = nn.Linear(128, 10)\n","\n","    def forward(self, x):\n","        x = F.relu(self.conv1(x))\n","        x = self.pool(F.relu(self.conv2(x)))\n","        x = self.pool(F.relu(self.conv3(x)))\n","        x = F.relu(self.conv4(x))\n","        x = torch.flatten(x, 1)\n","        x = F.relu(self.fc1(x))\n","        x = self.fc2(x)\n","        return x\n"],"metadata":{"id":"IvnVRwIZWsGW","executionInfo":{"status":"ok","timestamp":1760623974437,"user_tz":-300,"elapsed":132,"user":{"displayName":"RAMSHA KHAN","userId":"10959223629031507632"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def train_one_epoch(model, loader, device, optimizer, criterion):\n","    model.train()\n","    if device.type == \"cuda\":\n","        torch.cuda.synchronize()\n","    start = time.perf_counter()\n","\n","    total_loss = 0\n","    for xb, yb in loader:\n","        xb, yb = xb.to(device, non_blocking=True), yb.to(device, non_blocking=True)\n","        optimizer.zero_grad()\n","        loss = criterion(model(xb), yb)\n","        loss.backward()\n","        optimizer.step()\n","        total_loss += loss.item() * xb.size(0)\n","\n","    if device.type == \"cuda\":\n","        torch.cuda.synchronize()\n","    end = time.perf_counter()\n","    return (end - start), total_loss / len(loader.dataset)\n"],"metadata":{"id":"UKwI0PwxWulv","executionInfo":{"status":"ok","timestamp":1760623977132,"user_tz":-300,"elapsed":6,"user":{"displayName":"RAMSHA KHAN","userId":"10959223629031507632"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["\n","models = {\n","    \"Small\": SmallModel(),\n","    \"Medium\": MediumModel(),\n","    \"LargeCNN\": LargeCNN()\n","}\n","\n","results = []\n","\n","for name, model in models.items():\n","    model = model.to(device)\n","    optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.9)\n","\n","    print(f\"\\n🔹 Training {name} model\")\n","    torch.cuda.reset_peak_memory_stats(device)\n","\n","    epoch_time, loss = train_one_epoch(model, train_loader, device, optimizer, criterion)\n","    peak_mem = torch.cuda.max_memory_allocated(device) / 1024**2\n","\n","    !nvidia-smi --query-gpu=utilization.gpu,memory.used --format=csv,noheader,nounits | head -n 1\n","\n","    results.append({\n","        \"Model\": name,\n","        \"Epoch Time (s)\": round(epoch_time, 2),\n","        \"Peak GPU Memory (MiB)\": round(peak_mem, 2),\n","        \"Params (M)\": round(sum(p.numel() for p in model.parameters()) / 1e6, 3)\n","    })\n","\n","df_complexity = pd.DataFrame(results)\n","df_complexity\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"MPRQWC-FWx5a","executionInfo":{"status":"ok","timestamp":1760624021512,"user_tz":-300,"elapsed":41039,"user":{"displayName":"RAMSHA KHAN","userId":"10959223629031507632"}},"outputId":"3a4289b1-9389-472a-c31c-3605db9c5250"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","🔹 Training Small model\n","2, 162\n","\n","🔹 Training Medium model\n","3, 182\n","\n","🔹 Training LargeCNN model\n","42, 592\n"]},{"output_type":"execute_result","data":{"text/plain":["      Model  Epoch Time (s)  Peak GPU Memory (MiB)  Params (M)\n","0     Small           16.62                  21.10       0.102\n","1    Medium           10.95                  27.18       0.567\n","2  LargeCNN           12.75                 224.13       1.995"],"text/html":["\n","  <div id=\"df-4b2cfb59-ce77-4fc5-8633-b3fbcaaf0b61\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Epoch Time (s)</th>\n","      <th>Peak GPU Memory (MiB)</th>\n","      <th>Params (M)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Small</td>\n","      <td>16.62</td>\n","      <td>21.10</td>\n","      <td>0.102</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Medium</td>\n","      <td>10.95</td>\n","      <td>27.18</td>\n","      <td>0.567</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>LargeCNN</td>\n","      <td>12.75</td>\n","      <td>224.13</td>\n","      <td>1.995</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b2cfb59-ce77-4fc5-8633-b3fbcaaf0b61')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4b2cfb59-ce77-4fc5-8633-b3fbcaaf0b61 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4b2cfb59-ce77-4fc5-8633-b3fbcaaf0b61');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-75b90980-3901-4bdf-9701-95fcba0c4d56\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-75b90980-3901-4bdf-9701-95fcba0c4d56')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-75b90980-3901-4bdf-9701-95fcba0c4d56 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_cd90beda-bdca-40da-9bef-969fecf6bc27\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_complexity')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_cd90beda-bdca-40da-9bef-969fecf6bc27 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_complexity');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_complexity","summary":"{\n  \"name\": \"df_complexity\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Small\",\n          \"Medium\",\n          \"LargeCNN\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Epoch Time (s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8972918389420155,\n        \"min\": 10.95,\n        \"max\": 16.62,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          16.62,\n          10.95,\n          12.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Peak GPU Memory (MiB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.50429270522083,\n        \"min\": 21.1,\n        \"max\": 224.13,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          21.1,\n          27.18,\n          224.13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Params (M)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9864801062363094,\n        \"min\": 0.102,\n        \"max\": 1.995,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.102,\n          0.567,\n          1.995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["num_workers_list = [0, 2, 4, 8]\n","results = []\n","\n","for workers in num_workers_list:\n","    loader = DataLoader(trainset, batch_size=128, shuffle=True, num_workers=workers)\n","    model = SimpleNN().to(device)\n","    optimizer = optim.Adam(model.parameters(), lr=0.001)\n","    criterion = nn.CrossEntropyLoss()\n","\n","    start = time.time()\n","    for epoch in range(1):\n","        for images, labels in loader:\n","            images, labels = images.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(images)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","    total_time = time.time() - start\n","    results.append((workers, total_time))\n","    print(f\"num_workers={workers}: {total_time:.2f}s\")\n","\n","pd.DataFrame(results, columns=[\"num_workers\", \"Training Time (s)\"])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":333},"id":"c8skYWo1W1gy","executionInfo":{"status":"ok","timestamp":1760624104581,"user_tz":-300,"elapsed":47923,"user":{"displayName":"RAMSHA KHAN","userId":"10959223629031507632"}},"outputId":"d3d4dd23-72c4-4e4e-e954-7bfc279f39c8"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["num_workers=0: 12.24s\n","num_workers=2: 11.65s\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/torch/utils/data/dataloader.py:627: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["num_workers=4: 12.49s\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/torch/utils/data/dataloader.py:627: UserWarning: This DataLoader will create 8 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["num_workers=8: 11.44s\n"]},{"output_type":"execute_result","data":{"text/plain":["   num_workers  Training Time (s)\n","0            0          12.239480\n","1            2          11.654670\n","2            4          12.488595\n","3            8          11.443747"],"text/html":["\n","  <div id=\"df-af30b2af-b01e-468e-a618-500c2d75ad95\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>num_workers</th>\n","      <th>Training Time (s)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>12.239480</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>11.654670</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4</td>\n","      <td>12.488595</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8</td>\n","      <td>11.443747</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af30b2af-b01e-468e-a618-500c2d75ad95')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-af30b2af-b01e-468e-a618-500c2d75ad95 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-af30b2af-b01e-468e-a618-500c2d75ad95');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-a7cec33a-8c3e-496f-ac17-b16f0bfece1d\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7cec33a-8c3e-496f-ac17-b16f0bfece1d')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-a7cec33a-8c3e-496f-ac17-b16f0bfece1d button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"pd\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"num_workers\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          8,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training Time (s)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4889514553141323,\n        \"min\": 11.44374680519104,\n        \"max\": 12.488595485687256,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          11.654669523239136,\n          11.44374680519104,\n          12.239479780197144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]}]}